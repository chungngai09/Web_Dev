ALL WEB

基础
信息被传到IRA ， 去查dns ， 回到 chrome 通过各种不同协议去到id地址，那里会有不同的hyml/css/js
取决于网速的，server位置，trip数量，

HTML
Html + tab 全展开
<head>
	title
	<link css
<>
Tag ： <h1> </h1> header one  h1 - h2 - ..- h6  不同大小的header text 
<p></p> paragraph tag 会分段落
<strong></strong> bold  加粗
<em></em> 强调 斜体 
<ol>
	<li></li>
	<li></li>
	</ol> order list  ， 里面的list 会有数字标签
<ul></ul> 没有数字标签的list，会有黑点
 
Self closing tag
<br> break line
<img src=“”  >

Anchor tag
<a href =“” > New Page </a> 

Advanced html
<form>.       (self closing tag , every input better have a name to separate, 对于选择的select，每一个select better 有一个value)
	First Name <input type= “text” required>   </br> required ，必填
	Email <input type= “email” required>
	Password: <input type = “password” min = 5>
	Birth: <input type = “date”> </br>
	Gender: </br>   (give this radio a name 多选一 ，  )
	<input type= “radio” name = “Gender”> Male </br>
	<input type= “radio” name = “Gender” > Male </br>
	<input type= “radio” name = “Gender” > Male </br>
	Pets: </br> （多选）
	<input type= “checkbox” > Cat</br>
	<input type= “checkbox” > Dogs</br>
	Cars:</br>
	<select (multiple)>
		<option value=“volvo“> volvo</option>
		<option value=“audi“> volvo</option>
	</select>
	<input type =“submit” value = “”Register!>
	<input type =“reset”>
</form> 
<span></span> for inline
<div></div> for different part of content

Html vs html5
Semantic tags in Html5
<header> <nav> <footer>

CSS
Follow the rule
*Selector{
	Property: value ;
} 

1.Html in head
<link ..> css file
<link.. > font file
2.in tags
3.Html in head creat <style> tag

Properties: css-tricks.com  不同的有详细的图文
Color , background
Text-align:
Border: 
Display: inline-block 可以把几个分行了的弄成一行
Cursor:

Selectors
Class加在selector里用作区别
.class(类名){
} 
#div div + id = “div1”
* 
Element
Element1 , element2
Element1 element2 共同
element1 > element2 parent 
Element1 + element2 
:hover 
:last-child
:first-child 
!important 能override 所有选项

决定style显示的原因：
Specificity  Specificity.keegan.st 能区分出下面重要的要素的数量
Importance

Text and Font
Text-decoration
Text-transform
Line-height : ?px
Font-style/weight/size/family
!! Google fonts 

Images
Img {
Float: left / right
如果图片太大比text多，下面的可能弄不清，需要clear
Clear off
Textalign

Box model：
border 边
Padding：box 内
Margin : box 外
width / height : box 里内容

Px VS em VS rem
20px
5em 5倍当前内容大小, 和内容相关
2rem always ， 不变

Advanced CSS
先得到html ， 得到后从html读 需要css / fonts 等， 再传。收完css 才能显示，所以css大小决定渲染速度。 Css minify !!! 重要

Flexbox 非常不错，弄container  ， 可以玩 flex box froggy
.类名{. css-tricks
	flex-wrap : wrap  :
	display : flex;
	justify-content : center ;
}

CSS3 latest CSS。很多动态不错的，不过需要去查浏览器支不支持
Transition
Transform : scale(1.1)

Responsive UI : can see on developer tools on chrome 不同设备上

Bootstrap 
Different component CSS
Link css 在head ， Link css 在body 最后 ， 有自定义的css 在bootstrap的css 后面 。 各种component 直接复制到html 

CDN : Content delivery network

😭Bootstrap Grid 
Container :  很好用
	Grid default have 12 spaces !!!!!!! 
	col-sm / md - 3/6/12. Small / medium Very important  this depends on window size.

Bootstrap starter template mega tag + can have perfect imp in css-tricks

https://getbootstrap.com/docs/4.3/utilities/flex/ 
div (header section) 在不同尺寸下 排列layout通过col-12 宽度来显示
对于垂直的排布，用flexbox d-flex align-items-center h-100   高度100要打满

Mailchimp
Sign-up form ， 先加观众，add opt-in 可以让注册确认邮箱，防止spam
create  campaign

Github
- [ ] New repository name chungngai09.github.io 
Then copy all files to this folder on Desktop Github
Then submit to master . Click branch.
Then check out the chungngai09.github.io 
- [ ] Or just create and upload online , 
then setting make page in main then would a link https://chungngai09.github.io/Startup-of-the-year/.
Edit. This link in readme file

Animate CSS pre set CSS https://animate.style/
要学会从已经有的css的上面借用 	.	<link
*     rel="stylesheet"
*     href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css"
*   />

Creative Tim 有很多现成有显示的template
Free html/css templates http://www.mashup-template.com/templates.html
Some useful resources 
New: https://cruip.com/
New: Bootstrap Templates 0  Bootstrap Templates 1  Creative Tim Templates 
Bootstrap Templates 2
Animate.css


CSS Grid + CSS Layout
We would design using css grid combined with Flexbox. We may don’t even need bootstrap or free templates.
One important Flexbox 一维 CSS Grid 二维各种块

Make a container like Flexbox for Grid
Display : Grid
Gap: 20px 间隔
grid-Template-column / use 1fr , 1 fr 代表一块 1fr 1fr 2fr
Grid-template-rows: 
Can use repeat(3, 1 fr)
Auto 可以代表一个fr ，但是会根据东西大小调节grid大小  
grid-Template-colum : repeat(auto-fill, minmax(200px, 1fr)). 意思是小于200px，只要1fr

对于单个部分，可以通过 grid-colunm : 1/4 ; 这个就有三个fr的大小 1/-1 这一行占满 
or   span 2  占用2fr
行如此，列也如此 。很好用，尤其在排列图片上
https://grid.malven.co/  Grid CheatSheet  有现成的css 代码

Css body 有 default margin 
重要的练习 包括Nav,  Cover , Project Grid ,  Footer  有代码  重要！！！

Github — Website(creative-time) — 1-2 Big Projects — Blog — open source project
 Website 自我介绍 项目 linkedin 地址 ，github地址 等等 blog  

Javascipt
Very very important
Script.js 在html里的body写<script type = “text/javascript” src= “script.js”>    xxxx    </script>  写body里很重要，css在head，先html 和 css
Type :
1.Number : 1 + 2 可以直接写包括算数符号
2.string ： 用“” / ‘’ 哐住 “Hello” + “there!”    —> Hellothere! 
3.Boolean 
4.Undefined (var b ; b 就是undefined)

Comparisons
!==  不等
=== 等
>=
<=
>
<

JAVASCRIPT CONDITIONALS
-----------------
if
else
else if
<!-- ternary operator -->
<!-- switch -->

JAVASCRIPT FUNCTIONS
-----------------
var a = function name() {}
function name() {}
return
<!-- () => (new in ECMAScript 6) -->
  

Exercise  : 
5 + "34" // "534"
5 - "4" // 1
10 % 5 // 0
5 % 10 // 5
"Java" + "Script" // "JavaScript"
" " + " " //  "  "
" " + 0 //  " 0"
true + true // 2
true + false // 1
false + true //  1
false - true //  -1
3 - 4 //  -1
"Bob" - "bill" // NAN

5 >= 1 // true
0 === 1 //  false
4 <= 1 //  false
1 != 1 //  false
"A" > "B" //  false
"B" < "C" //  true
"a" > "A" //  true
"b" < "A" //  false
true === false //  false
true != true // false


// Make the string: "HI There! It's sunny out" by using the + sign.
"Hi There! " + "It\'s \"sunny\" out"


Javascript Variables
Var George = "Hi There! " + "It\'s \"sunny\" out" ;
George
Var should start with word / _/ $

prompt()
Var number = Prompt (“what is your number”) ; 弹窗输入
Var sum = Number(number) 

alert()
alert(Hi !!!)
可以alert(sum) 接着上面promtp就可以告诉我们结果。好玩

console.log()  在console显示，不会很烦人

2 way to create a function 
1. 有名
function sayHelloo(){
    console.log("Hello");
}
sayHelloo();
2.无名，sayBye 是 variable ， function是 anomyumous function
var sayBye = function(){
    console.log("Bye");
}
sayBye()

function sing(song){ 用argument会方便
    console.log(song);
    return xx ; (if we need )
}  

JAVASCRIPT DATA STRUCTURES 
-----------------
Array
Object

对于array
var mixedArr = [ / / / / /] ; 可以有各种types 很灵活 ，都是index ,
// 1. Remove the Banana from the array.
array.shift();

// 2. Sort the array in order. 
array.sort();

// 3. Put "Kiwi" at the end of the array.
array.push("Kiwi");

// 4. Remove "Apples" from the array.
array.splice(0, 1);

// 5. Sort the array in reverse order. 
array.reverse();


对于Object , 主要用来存信息
var user = {
    name : "aaa" ,
    age : "1",
    //
    //
    shout : function(){
        console.log("a") ;
    }
} 用的大括号
抓去object里，直接user.name 

array 和 object 可以相互嵌套 ， object可以接一个function, 这个function就是一个method

JAVASCRIPT LOOPING
-----------------
for
while
do 
forEach (new in ECMAScript 5)


DOM  
https://www.w3schools.com/js/js_htmldom.asp
Document Object Model
用的是window 下面的 Document method 通过js 来改html css
window指的就是大的浏览器，包括alert prompt也是里面的

DOM Selectors
--------------
getElementById
getElementByName

querySelector  找tag
querySelectorAll

getAttribute 找tag里的class
setAttribute

##Changing Styles 加style
style.{property} //ok

className //best 找class
classList //best

classList.add 如果有css里的类 直接加
classList.remove 减
classList.toggle 反转
有这个就可以实现点击在原来的基础上不用下载html css 就改界面

##Bonus
innerHTML //DANGEROUS

parentElement
children

##It is important to CACHE selectors in variables

DOM Events
https://developer.mozilla.org/en-US/docs/Web/Events 

Are the events (mouse and keyboard ) that browser allow us to do
input 
createElement
li.appendChild , createTextNode("");

Callback Functions , function后没加括号
button.addEventListener("click", addListAfterClick);
input.addEventListener("keypress", addListAfterKeypress);

Check DOM js




Advanced js
-----------
Scope
Control flow ( ? : , switch)

ES5 ES6 new features compared to old version
查看练习
let 在 function 里有新scope ，不同于var
const 后面分配的内容不能变，但是里面的property可以变

/// change everything below to the newer Javascript!

// let + const
let a = 'test';
const b = true;
const c = 789;
a = 'test2';


// Destructuring
const person = {
    firstName : "John",
    lastName  : "Doe",
    age       : 50,
    eyeColor  : "blue"
};

const { firstName, lastName, age, eyeColor } = person;


// Object properties
const a = 'test';
const b = true;
const c = 789;

const okObj = {a, b, c};

写strign 用`` + ${var} 会很方便，不用考虑空格的问题
// Template strings
const message = `Hello ${firstName} have I met you before? I think we met in ${city}. last summer no???`;


// default arguments
// default age to 10;
const isValidAge = (age = 10) => age;

// Symbol
// Create a symbol: "This is my first Symbol"
const sym = Symbol('This is my first Symbol');

这样写方程会简单方便，用不用取决于自己
// Arrow functions
const whereAmI = (username, location) => {
    if (username && location) {
        return "I am not lost";
    } else {
        return "I am totally lost!";
    }
}


//Solve these problems: 
Array Function !!!!!

//#1 Create a one line function that adds adds two parameters
const sum = (a, b) => a + b

//Closure: What does the last line return?
const addTo = x => y => x + y
var addToTen = addTo(10)
addToTen(3) // returns 13

//Currying: What does the last line return?
const sum = (a, b) => a + b
const curriedSum = (a) => (b) => a + b
curriedSum(30)(1) // 31


//Currying: What does the last line return?
const sum = (a, b) => a + b
const curriedSum = (a) => (b) => a + b
const add5 = curriedSum(5)
add5(12) // 17

//Composing: What does the last line return?
const compose = (f, g) => (a) => f(g(a));
const add1 = (num) => num + 1;
const add5 = (num) => num + 5;
compose(add1, add5)(10) // 16

//What are the two elements of a pure function?
// 1. Deterministic --> always produces the same results given the same inputs
// 2. No Side Effects -->  It does not depend on any state, or data, change during a program’s execution. It must only depend on its input elements.

Advanced Arrays
map fliter reduce

// Complete the below questions using this array:
const array = [
	{
		username: "john",
		team: "red",
		score: 5,
		items: ["ball", "book", "pen"]
	},
	{
		username: "becky",
		team: "blue",
		score: 10,
		items: ["tape", "backpack", "pen"]
	},
	{
		username: "susy",
		team: "red",
		score: 55,
		items: ["ball", "eraser", "pen"]
	},
	{
		username: "tyson",
		team: "green",
		score: 1,
		items: ["book", "pen"]
	},

];

//Create an array using forEach that has all the usernames with a "!" to each of the usernames
let newArray = []
array.forEach(user => {
	let { username } = user;
	username = username + "!";
	newArray.push(username);
})
console.log(newArray);

//Create an array using map that has all the usernames with a "?" at the end of usernames
const mapArray = array.map(user => {
	let { username } = user;
	return username + "?";
})
console.log(mapArray);

//Filter the array to only include users who are on team: red
const filterArray = array.filter(user => {
	return user.team === "red";
})
console.log(filterArray);

//Find out the total score of all users using reduce
const total = array.reduce((acc, user) => {
	return acc + user.score
}, 0);
console.log(total);


// (1), what is the value of i? INDEX of the array.
// (2), Make this map function pure:
const arrayNum = [1, 2, 4, 5, 8, 9];
const newArray = arrayNum.map((num, i) => {
	return num * 2;
})



//BONUS: create a new list with all user information, but add "!" to the end of each items they own.
const answer = array.map(user => {
	user.items = user.items.map(item => {
		return item + "!"
	});
	return user;
})
console.log(answer);


ES7 :
includs and square 

ES8 : 
String method
.padStart()
.padEnd()

// Solve the below problems:

// #1) Line up the Turtle and the Rabbit at the start line:
const startLine = '     ||<- Start line';
let turtle = '🐢';
let rabbit = '🐇';

// it should look like this:
'     ||<- Start line'
'       🐢'
'       🐇'

// when you do:
console.log(startLine);
console.log(turtle);
console.log(rabbit);


turtle = turtle.padStart(8);
rabbit = rabbit.padStart(8);


// #2) What happens when you run turtle.trim().padEnd(9, '=') on the turtle variable
// Read about what the second parameter does in padEnd and padStart
turtle = turtle.trim().padEnd(9, '=');

'     ||<- Start line'
'🐢======='
'       🐇'


// #3) Get the below object to go from:
let obj = {
  my: 'name',
  is: 'Rudolf',
  the: 'raindeer'
}
// to this:
'my name is Rudolf the raindeer'

// Object.entries(obj).map(value => value.join(" ")).join(' ')

Object.entries(obj).map(value => value.join(" ")).join(" ")
   

ES10(ES2019) : 
Array method
.flat() make nested array flat
the default layer is 1 we can use flat(2) to get deeper

flatMap()

trimStart()
trimEnd()

fromEntries()

try{

}catch{

}

// Solve the below questions:

// #1 Turn this array into a new array: [1,2,3,[4],[5]]. Bonus if you can do it on one line
const array = [[1],[2],[3],[[[4]]],[[[5]]]]
//Solution:
console.log(array.flat(2))


// #2 Turn this array into a new array: [ 'Hello young grasshopper!', 'you are', 'learning fast!' ]
const greeting = [["Hello", "young", "grasshopper!"], ["you", "are"], ["learning", "fast!"]];
//Solution:
console.log(greeting.flatMap(x => x.join(' ')))


//#3 Turn the greeting array above into a string: 'Hello young grasshopper you are learning fast!'
//Solution
console.log(greeting.flatMap(x => x.join(' ')).join(' '))

//#4 Turn the trapped 3 number into: [3]
const trapped = [[[[[[[[[[[[[[[[[[[[[[[[[[3]]]]]]]]]]]]]]]]]]]]]]]]]];
//Solution
console.log(trapped.flat(Infinity))
// Infintiy is actually a LARGE number in JavaScipt. It represents the maximum amount of memory that we can hold for a number! Learn more here: https://riptutorial.com/javascript/example/2337/infinity-and--infinity

//#5 Clean up this email to have no whitespaces. Make the answer be in a single line (return a new string):
const userEmail3 = '     cannotfillemailformcorrectly@gmail.com   '
//Solution:
console.log(userEmail3.trimEnd().trimStart())


//#6 Turn the below users (value is their ID number) into an array: [ [ 'user1', 18273 ], [ 'user2', 92833 ], [ 'user3', 90315 ] ]
const users = { user1: 18273, user2: 92833, user3: 90315 }
//Solution
const usersArray = Object.entries(users)

//#7 change the output array of the above to have the user's IDs multiplied by 2 -- Should output:[ [ 'user1', 36546 ], [ 'user2', 185666 ], [ 'user3', 180630 ] ]
//Solution
updatedUsersArray = usersArray.map((user) => [user[0], user[1] * 2])

//#8 change the output array of question #7 back into an object with all the users IDs updated to their new version. Should output: { user1: 36546, user2: 185666, user3: 180630 }
//Solution
const updatedUsers = Object.fromEntries(updatedUsersArray)
console.log(updatedUsers)

ES2020 ! 
New type : bigint
JS 采用双精度 , 2*53 -1 max_safe
但是有bigint 可以解决，
we can solve the problem when we try to calculate over max_safe number 

Optional chaining operation
use to check if there is property in a lot layed object instead coding in if &&

Nullish Double question is used to check none or Undefined


GITHUB 
简单的一起在main 工作
1. 明create a repository and a readme
2. 明in clone or download copy ssl
3. 明git clone ssl
4. 明do projects , create files. now we in a .git folder
5. 明git status
6. 明git add . 全部变过的
7. 明git commit -m "message"
8. 明git push （把commit过的文件push到repository）
9. 花git clone ssl
10. 花变动了project , 同样git add file , git commit , git push 
11. 明这时候git pull ， 就会得到更新

有branch merge
Git branch 
Git branch littlefeature
Git checkout littlefeature
改文件，传文件去github
另一个人可以去github merge , 再删除branch ， 就好了

Before make any changes, keep your fork in sync to avoid merge conflicts:

git remote add upstream // 原fork地址 https://github.com/zero-to-mastery/start-here-guidelines.git
git pull upstream master

Contributing to Open source Project


NPM :
share 别人写好的包裹，可能有错。

live-server
Lodash

两个，global装的时候用sudo npm install -g **
装完Lodash有一堆js，用browserify 把js 弄成一个bundle.js
npm init 可以生产当前project 的 dependencies的json
在有packgage的地方用npm install 就能装好全部json文件
npm run ** 能跑json里面的scipt文件

Keeping Your Projects Up To Date! 
Update dependency packages in Github in security 很方便。

个人网站！ myProfortlio
需要继续搞

React : 
component
How we CRA begin: 
npx create-react-app my-app
cd my-app
npm start

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

class app extends component{

}

Should import react in different app , because we are using it as JSX (div tag)

components + container + template + page 
one way dataflow , state , only its container can change its state


Project update , npm update / audit fix